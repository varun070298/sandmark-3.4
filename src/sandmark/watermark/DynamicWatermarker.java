package sandmark.watermark;

/**
 *  A DynamicWatermarker object encapsulates code for running
 *  a particular dynamic watermark algorithm.
 */

public abstract class DynamicWatermarker extends sandmark.watermark.GeneralWatermarker {
    
    /**
     * Start a tracing run of the program. Return an iterator
     * object that will generate the trace points encountered
     * by the program.
     */
    public abstract void startTracing (DynamicTraceParameters params) 
	throws sandmark.util.exec.TracingException;
    
    /**
     * This routine should be called when the tracing run has
     * completed. tracePoints is a vector of generated 
     * trace points generated by the iterator returned by
     * startTracing.
     */
    public abstract void endTracing() 
	throws sandmark.util.exec.TracingException;

    /**
     * Force the end to a tracing run of the program.
     */
    public abstract void stopTracing() 
	throws sandmark.util.exec.TracingException;
    
    
    /* Embed a watermark value into the program. The props argument
     * holds at least the following properties:
     *  <UL>
     *     <LI> Watermark: The watermark value to be embedded.
     *     <LI> Trace File: The name of the file containing trace data.
     *     <LI> Input File: The name of the file to be watermarked.
     *     <LI> Output File: The name of the jar file to be constructed.
     *     <LI> DWM_CT_Encode_ClassName: The name of the Java file that builds the watermark.
     *  </UL>
     */
    public abstract void embed(DynamicEmbedParameters params);

    
    /**
     * Start a recognition run of the program.
     */
    public abstract void startRecognition (DynamicRecognizeParameters params) 
	throws sandmark.util.exec.TracingException;
    
    /**
     * Return an iterator object that will generate 
     * the watermarks found in the program.
     */
    public abstract java.util.Iterator watermarks();
    
    /**
     * Force the end to a tracing run of the program.
     */
    public abstract void stopRecognition() 
	throws sandmark.util.exec.TracingException;

    public abstract void waitForProgramExit();

    /*
     *  Get the GENERAL properties of DynamicWatermark
     */
    private static sandmark.util.ConfigProperties sConfigProps;
    public static sandmark.util.ConfigProperties getProperties(){
        if(sConfigProps == null) {
            String[][] props = {
                {"Output File",
                 "",
                 "The output jar-file.",
                 null,"J","DE",
                },
		{"Watermark",
		 "",
		 "The watermark to be embedded.",
		 null,"S","DE",
		},
                {"Trace File",
                 "",
                 "The file of trace-points generated during tracing.",
                 null,"F","DT,DE",
                },
                {"Class Path",
                 "",
                 "User-defined classpath additions used during tracing and recognition.",
                 null,"S","DT,DR",
                },
                {"Main Class",
                 "",
                 "The main class where execution starts during tracing or recognition.",
                 null,"S","DT,DR",
                },	
                {"Arguments",
                 "",
                 "The arguments to the program during tracing or recognition.",
                 null,"S","DT,DR",
                },
            };
            sConfigProps = new sandmark.util.ConfigProperties
                (props,sandmark.watermark.GeneralWatermarker.getProperties());
	}
        return sConfigProps;
    }
    
    public static DynamicEmbedParameters getEmbedParams(sandmark.program.Application app) {
        DynamicEmbedParameters dep = new DynamicEmbedParameters();
        dep.app = app;
        dep.watermark = (String)getProperties().getValue("Watermark");
        dep.traceFile = (java.io.File)getProperties().getValue("Trace File");
        return dep;
    }
    
    public static DynamicRecognizeParameters getRecognizeParams(sandmark.program.Application app) 
        throws java.io.IOException,ClassNotFoundException {
       String mainClass = (String)getProperties().getValue("Main Class");
       if(mainClass == null || mainClass.equals("") || 
          app.getClass(mainClass) == null)
          throw new ClassNotFoundException(mainClass);
        DynamicRecognizeParameters drp = new DynamicRecognizeParameters();
        drp.app = app;
        drp.appFile = java.io.File.createTempFile("smk",".jar");
        app.save(new java.io.FileOutputStream(drp.appFile));
        drp.programCmdLine = 
            constructArgv(drp.appFile,(String)getProperties().getValue("Class Path"),
             mainClass,
             (String)getProperties().getValue("Arguments"));
        return drp;
    }
    
    public static DynamicTraceParameters getTraceParams(sandmark.program.Application app) 
        throws java.io.IOException,ClassNotFoundException {
       String mainClass = (String)getProperties().getValue("Main Class");
       if(mainClass == null || mainClass.equals("") || 
          app.getClass(mainClass) == null)
          throw new ClassNotFoundException(mainClass);
        DynamicTraceParameters dtp = new DynamicTraceParameters();
        dtp.app = app;
        dtp.appFile = java.io.File.createTempFile("smk",".jar");
        dtp.appFile.deleteOnExit();
        dtp.app.save(new java.io.FileOutputStream(dtp.appFile));
        dtp.programCmdLine = 
            constructArgv(dtp.appFile,(String)getProperties().getValue("Class Path"),
             mainClass,
             (String)getProperties().getValue("Arguments"));
        dtp.traceFile = (java.io.File)getProperties().getValue("Trace File");
        return dtp;
    }
    
    public static String[] constructArgv(java.io.File jar,String extraCP,
                                         String mainClass,String args) {
        int argn = 3;
        if(args == null)
           args = "";
        java.util.StringTokenizer S = new java.util.StringTokenizer(args," ");
        int C = S.countTokens();
        argn += C;
        String[] argv = new String[argn];

        if(extraCP == null)
           extraCP = "";
        String classPath = "" + jar + java.io.File.pathSeparatorChar + extraCP;

        argn = 0;
        if (classPath != null) {
            argv[argn++] = "-classpath";
            argv[argn++] = classPath;
        }

        argv[argn++] = mainClass;

        for(int i=0; i<C; i++)
           argv[argn++] = S.nextToken();

        //   System.out.println("constructArgv:");
        // for(int i=0; i<argv.length; i++)
        //     System.out.println(argv[i]);

        return argv;
     }

    /*
     *  Get the HTML codes of the About page for Dynamic Watermarking
     */
    public static java.lang.String getAboutHTML(){
	return 
	    "<HTML><BODY>" +
	    "<CENTER><B>List of Dynamic Watermarkers</B></CENTER>" +
	    "</BODY></HTML>";
    }

    /*
     *  Describe what dynaimc watermarking is.
     */
    public static java.lang.String getOverview(){
	return "A dynamic watermarking algorithm embeds a " +
               "watermark in the runtime structure of the program. " +
               "The watermark is extracted by running the program " +
               "with a special input sequence (the watermark key).";
    }

    /*
     *  Get the URL of the Help page for Dynamic Watermarking
     */
    public static java.lang.String getHelpURL(){
	return "sandmark/watermark/doc/watermarking.html";
    }
}

